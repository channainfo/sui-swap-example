// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module sui_swap_example::exchange {
    use std::string::String;
    use sui::event;
    use sui::object::{Self, ID, UID};
    use sui::transfer;
    use sui::tx_context::TxContext;

    struct EXCHANGE has drop {}

    friend sui_swap_example::exchange_add_token_pair_logic;
    friend sui_swap_example::exchange_aggregate;

    #[allow(unused_const)]
    const EDataTooLong: u64 = 102;
    const EInappropriateVersion: u64 = 103;

    fun init(witness: EXCHANGE, ctx: &mut TxContext) {
        let exchange = new_exchange(
            witness,
            ctx,
        );
        event::emit(new_init_exchange_event(&exchange));
        share_object(exchange);
    }

    struct Exchange has key {
        id: UID,
        version: u64,
        name: String,
        token_pairs: vector<ID>,
    }

    public fun id(exchange: &Exchange): object::ID {
        object::uid_to_inner(&exchange.id)
    }

    public fun version(exchange: &Exchange): u64 {
        exchange.version
    }

    public fun name(exchange: &Exchange): String {
        exchange.name
    }

    public(friend) fun set_name(exchange: &mut Exchange, name: String) {
        assert!(std::string::length(&name) <= 200, EDataTooLong);
        exchange.name = name;
    }

    public fun token_pairs(exchange: &Exchange): vector<ID> {
        exchange.token_pairs
    }

    public(friend) fun set_token_pairs(exchange: &mut Exchange, token_pairs: vector<ID>) {
        exchange.token_pairs = token_pairs;
    }

    public(friend) fun new_exchange(
        _witness: EXCHANGE,
        ctx: &mut TxContext,
    ): Exchange {
        Exchange {
            id: object::new(ctx),
            version: 0,
            name: std::string::utf8(b"sui-dex-example"),
            token_pairs: std::vector::empty(),
        }
    }

    struct InitExchangeEvent has copy, drop {
        id: object::ID,
    }

    public fun init_exchange_event_id(init_exchange_event: &InitExchangeEvent): object::ID {
        init_exchange_event.id
    }

    public(friend) fun new_init_exchange_event(
        exchange: &Exchange,
    ): InitExchangeEvent {
        InitExchangeEvent {
            id: id(exchange),
        }
    }

    struct TokenPairAddedToExchange has copy, drop {
        id: object::ID,
        version: u64,
        token_pair_id: ID,
    }

    public fun token_pair_added_to_exchange_id(token_pair_added_to_exchange: &TokenPairAddedToExchange): object::ID {
        token_pair_added_to_exchange.id
    }

    public fun token_pair_added_to_exchange_token_pair_id(token_pair_added_to_exchange: &TokenPairAddedToExchange): ID {
        token_pair_added_to_exchange.token_pair_id
    }

    public(friend) fun new_token_pair_added_to_exchange(
        exchange: &Exchange,
        token_pair_id: ID,
    ): TokenPairAddedToExchange {
        TokenPairAddedToExchange {
            id: id(exchange),
            version: version(exchange),
            token_pair_id,
        }
    }


    public(friend) fun transfer_object(exchange: Exchange, recipient: address) {
        assert!(exchange.version == 0, EInappropriateVersion);
        transfer::transfer(exchange, recipient);
    }

    public(friend) fun update_version_and_transfer_object(exchange: Exchange, recipient: address) {
        update_object_version(&mut exchange);
        transfer::transfer(exchange, recipient);
    }

    public(friend) fun share_object(exchange: Exchange) {
        assert!(exchange.version == 0, EInappropriateVersion);
        transfer::share_object(exchange);
    }

    public(friend) fun update_version_and_share_object(exchange: Exchange) {
        update_object_version(&mut exchange);
        transfer::share_object(exchange);
    }

    public(friend) fun freeze_object(exchange: Exchange) {
        assert!(exchange.version == 0, EInappropriateVersion);
        transfer::freeze_object(exchange);
    }

    public(friend) fun update_version_and_freeze_object(exchange: Exchange) {
        update_object_version(&mut exchange);
        transfer::freeze_object(exchange);
    }

    public(friend) fun update_object_version(exchange: &mut Exchange) {
        exchange.version = exchange.version + 1;
        //assert!(exchange.version != 0, EInappropriateVersion);
    }

    public(friend) fun drop_exchange(exchange: Exchange) {
        let Exchange {
            id,
            version: _version,
            name: _name,
            token_pairs: _token_pairs,
        } = exchange;
        object::delete(id);
    }

    public(friend) fun emit_token_pair_added_to_exchange(token_pair_added_to_exchange: TokenPairAddedToExchange) {
        event::emit(token_pair_added_to_exchange);
    }

}
