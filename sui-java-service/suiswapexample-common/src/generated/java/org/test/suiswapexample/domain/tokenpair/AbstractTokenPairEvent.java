// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiswapexample.domain.tokenpair;

import java.util.*;
import java.math.BigInteger;
import java.util.Date;
import org.test.suiswapexample.domain.*;
import org.test.suiswapexample.specialization.*;
import org.test.suiswapexample.domain.AbstractEvent;

public abstract class AbstractTokenPairEvent extends AbstractEvent implements TokenPairEvent.SqlTokenPairEvent, SuiEventEnvelope.MutableSuiEventEnvelope, SuiMoveEvent.MutableSuiMoveEvent, HasStatus.MutableHasStatus {
    private TokenPairEventId tokenPairEventId = new TokenPairEventId();

    public TokenPairEventId getTokenPairEventId() {
        return this.tokenPairEventId;
    }

    public void setTokenPairEventId(TokenPairEventId eventId) {
        this.tokenPairEventId = eventId;
    }
    
    public String getId() {
        return getTokenPairEventId().getId();
    }

    public void setId(String id) {
        getTokenPairEventId().setId(id);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    public BigInteger getVersion() {
        return getTokenPairEventId().getVersion();
    }
    
    public void setVersion(BigInteger version) {
        getTokenPairEventId().setVersion(version);
    }

    private Long suiTimestamp;

    public Long getSuiTimestamp() {
        return this.suiTimestamp;
    }
    
    public void setSuiTimestamp(Long suiTimestamp) {
        this.suiTimestamp = suiTimestamp;
    }

    private String suiTxDigest;

    public String getSuiTxDigest() {
        return this.suiTxDigest;
    }
    
    public void setSuiTxDigest(String suiTxDigest) {
        this.suiTxDigest = suiTxDigest;
    }

    private BigInteger suiEventSeq;

    public BigInteger getSuiEventSeq() {
        return this.suiEventSeq;
    }
    
    public void setSuiEventSeq(BigInteger suiEventSeq) {
        this.suiEventSeq = suiEventSeq;
    }

    private String suiPackageId;

    public String getSuiPackageId() {
        return this.suiPackageId;
    }
    
    public void setSuiPackageId(String suiPackageId) {
        this.suiPackageId = suiPackageId;
    }

    private String suiTransactionModule;

    public String getSuiTransactionModule() {
        return this.suiTransactionModule;
    }
    
    public void setSuiTransactionModule(String suiTransactionModule) {
        this.suiTransactionModule = suiTransactionModule;
    }

    private String suiSender;

    public String getSuiSender() {
        return this.suiSender;
    }
    
    public void setSuiSender(String suiSender) {
        this.suiSender = suiSender;
    }

    private String suiType;

    public String getSuiType() {
        return this.suiType;
    }
    
    public void setSuiType(String suiType) {
        this.suiType = suiType;
    }

    private String status;

    public String getStatus() {
        return this.status;
    }
    
    public void setStatus(String status) {
        this.status = status;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    private String commandType;

    public String getCommandType() {
        return commandType;
    }

    public void setCommandType(String commandType) {
        this.commandType = commandType;
    }

    protected AbstractTokenPairEvent() {
    }

    protected AbstractTokenPairEvent(TokenPairEventId eventId) {
        this.tokenPairEventId = eventId;
    }


    public abstract String getEventType();

    public static class TokenPairClobEvent extends AbstractTokenPairEvent {

        protected Map<String, Object> getDynamicProperties() {
            return dynamicProperties;
        }

        protected void setDynamicProperties(Map<String, Object> dynamicProperties) {
            if (dynamicProperties == null) {
                throw new IllegalArgumentException("dynamicProperties is null.");
            }
            this.dynamicProperties = dynamicProperties;
        }

        private Map<String, Object> dynamicProperties = new HashMap<>();

        protected String getDynamicPropertiesLob() {
            return ApplicationContext.current.getClobConverter().toString(getDynamicProperties());
        }

        protected void setDynamicPropertiesLob(String text) {
            getDynamicProperties().clear();
            Map<String, Object> ps = ApplicationContext.current.getClobConverter().parseLobProperties(text);
            if (ps != null) {
                for (Map.Entry<String, Object> kv : ps.entrySet()) {
                    getDynamicProperties().put(kv.getKey(), kv.getValue());
                }
            }
        }

        @Override
        public String getEventType() {
            return "TokenPairClobEvent";
        }

    }

    public static class LiquidityInitialized extends TokenPairClobEvent implements TokenPairEvent.LiquidityInitialized {

        @Override
        public String getEventType() {
            return "LiquidityInitialized";
        }

        public String getExchangeId() {
            Object val = getDynamicProperties().get("exchangeId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setExchangeId(String value) {
            getDynamicProperties().put("exchangeId", value);
        }

        public String getProvider() {
            Object val = getDynamicProperties().get("provider");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setProvider(String value) {
            getDynamicProperties().put("provider", value);
        }

        public String getXTokenType() {
            Object val = getDynamicProperties().get("xTokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setXTokenType(String value) {
            getDynamicProperties().put("xTokenType", value);
        }

        public String getYTokenType() {
            Object val = getDynamicProperties().get("yTokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setYTokenType(String value) {
            getDynamicProperties().put("yTokenType", value);
        }

        public BigInteger getXAmount() {
            Object val = getDynamicProperties().get("xAmount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setXAmount(BigInteger value) {
            getDynamicProperties().put("xAmount", value);
        }

        public BigInteger getYAmount() {
            Object val = getDynamicProperties().get("yAmount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setYAmount(BigInteger value) {
            getDynamicProperties().put("yAmount", value);
        }

        public BigInteger getLiquidityAmount() {
            Object val = getDynamicProperties().get("liquidityAmount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setLiquidityAmount(BigInteger value) {
            getDynamicProperties().put("liquidityAmount", value);
        }

        public String getLiquidityTokenId() {
            Object val = getDynamicProperties().get("liquidityTokenId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setLiquidityTokenId(String value) {
            getDynamicProperties().put("liquidityTokenId", value);
        }

    }

    public static class LiquidityAdded extends TokenPairClobEvent implements TokenPairEvent.LiquidityAdded {

        @Override
        public String getEventType() {
            return "LiquidityAdded";
        }

        public String getProvider() {
            Object val = getDynamicProperties().get("provider");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setProvider(String value) {
            getDynamicProperties().put("provider", value);
        }

        public String getXTokenType() {
            Object val = getDynamicProperties().get("xTokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setXTokenType(String value) {
            getDynamicProperties().put("xTokenType", value);
        }

        public String getYTokenType() {
            Object val = getDynamicProperties().get("yTokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setYTokenType(String value) {
            getDynamicProperties().put("yTokenType", value);
        }

        public BigInteger getXAmount() {
            Object val = getDynamicProperties().get("xAmount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setXAmount(BigInteger value) {
            getDynamicProperties().put("xAmount", value);
        }

        public BigInteger getYAmount() {
            Object val = getDynamicProperties().get("yAmount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setYAmount(BigInteger value) {
            getDynamicProperties().put("yAmount", value);
        }

        public BigInteger getLiquidityAmount() {
            Object val = getDynamicProperties().get("liquidityAmount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setLiquidityAmount(BigInteger value) {
            getDynamicProperties().put("liquidityAmount", value);
        }

        public String getLiquidityTokenId() {
            Object val = getDynamicProperties().get("liquidityTokenId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setLiquidityTokenId(String value) {
            getDynamicProperties().put("liquidityTokenId", value);
        }

    }

    public static class LiquidityRemoved extends TokenPairClobEvent implements TokenPairEvent.LiquidityRemoved {

        @Override
        public String getEventType() {
            return "LiquidityRemoved";
        }

        public String getLiquidityToken() {
            Object val = getDynamicProperties().get("liquidityToken");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setLiquidityToken(String value) {
            getDynamicProperties().put("liquidityToken", value);
        }

        public BigInteger getLiquidityAmount() {
            Object val = getDynamicProperties().get("liquidityAmount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setLiquidityAmount(BigInteger value) {
            getDynamicProperties().put("liquidityAmount", value);
        }

        public String getLiquidityTokenId() {
            Object val = getDynamicProperties().get("liquidityTokenId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setLiquidityTokenId(String value) {
            getDynamicProperties().put("liquidityTokenId", value);
        }

        public String getProvider() {
            Object val = getDynamicProperties().get("provider");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setProvider(String value) {
            getDynamicProperties().put("provider", value);
        }

        public String getXTokenType() {
            Object val = getDynamicProperties().get("xTokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setXTokenType(String value) {
            getDynamicProperties().put("xTokenType", value);
        }

        public String getYTokenType() {
            Object val = getDynamicProperties().get("yTokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setYTokenType(String value) {
            getDynamicProperties().put("yTokenType", value);
        }

        public BigInteger getXAmount() {
            Object val = getDynamicProperties().get("xAmount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setXAmount(BigInteger value) {
            getDynamicProperties().put("xAmount", value);
        }

        public BigInteger getYAmount() {
            Object val = getDynamicProperties().get("yAmount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setYAmount(BigInteger value) {
            getDynamicProperties().put("yAmount", value);
        }

    }

    public static class XSwappedForY extends TokenPairClobEvent implements TokenPairEvent.XSwappedForY {

        @Override
        public String getEventType() {
            return "XSwappedForY";
        }

        public BigInteger getExpectedYAmountOut() {
            Object val = getDynamicProperties().get("expectedYAmountOut");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setExpectedYAmountOut(BigInteger value) {
            getDynamicProperties().put("expectedYAmountOut", value);
        }

        public String getSender() {
            Object val = getDynamicProperties().get("sender");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setSender(String value) {
            getDynamicProperties().put("sender", value);
        }

        public String getXTokenType() {
            Object val = getDynamicProperties().get("xTokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setXTokenType(String value) {
            getDynamicProperties().put("xTokenType", value);
        }

        public String getYTokenType() {
            Object val = getDynamicProperties().get("yTokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setYTokenType(String value) {
            getDynamicProperties().put("yTokenType", value);
        }

        public BigInteger getXAmount() {
            Object val = getDynamicProperties().get("xAmount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setXAmount(BigInteger value) {
            getDynamicProperties().put("xAmount", value);
        }

        public BigInteger getYAmount() {
            Object val = getDynamicProperties().get("yAmount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setYAmount(BigInteger value) {
            getDynamicProperties().put("yAmount", value);
        }

    }

    public static class YSwappedForX extends TokenPairClobEvent implements TokenPairEvent.YSwappedForX {

        @Override
        public String getEventType() {
            return "YSwappedForX";
        }

        public BigInteger getExpectedXAmountOut() {
            Object val = getDynamicProperties().get("expectedXAmountOut");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setExpectedXAmountOut(BigInteger value) {
            getDynamicProperties().put("expectedXAmountOut", value);
        }

        public String getSender() {
            Object val = getDynamicProperties().get("sender");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setSender(String value) {
            getDynamicProperties().put("sender", value);
        }

        public String getXTokenType() {
            Object val = getDynamicProperties().get("xTokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setXTokenType(String value) {
            getDynamicProperties().put("xTokenType", value);
        }

        public String getYTokenType() {
            Object val = getDynamicProperties().get("yTokenType");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setYTokenType(String value) {
            getDynamicProperties().put("yTokenType", value);
        }

        public BigInteger getXAmount() {
            Object val = getDynamicProperties().get("xAmount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setXAmount(BigInteger value) {
            getDynamicProperties().put("xAmount", value);
        }

        public BigInteger getYAmount() {
            Object val = getDynamicProperties().get("yAmount");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setYAmount(BigInteger value) {
            getDynamicProperties().put("yAmount", value);
        }

    }


}

